9/19

< 클래스와 객체 >

레시피: class
[재료: 멤버 변수 / 조리과정: 메소드]

쭈꾸미 레시피는 실제 사람이 먹을 음식이라고 할 수 있을까?
: 먹을 수 있게 조리과정을 적은 것이기 때문에 먹을 수 있는 방법을 적어놓은 것은 맞다.
 하지만 방법일뿐 요리가 아니기때문에 먹을 음식이라고 할수는 없다.

* 실제 만들어진 음식: 객체

레시피는 왜 만들었을까?
: 재료와 조리 과정의 차이에 따라 다른 음식으로 변할 수 있기 때문에 
 그에 맞는 레시피를 만들어야 한다.
: 재사용성을 높이기 위해서 ( 레시피로 인해 누구나 비슷한 맛을 낼 수 있다. )

레시피와 실제로 만들어진 음식은 어떤 차이가 있을까?
: 레시피는 요리 방법을 기재한 것이고 실제 만들어진 음식은 레시피에 따른 조리 과정을 거친 것이다.
  레시피는 방법이고 만들어진 음식은 결과(실제 내가 필요한 대상)라고 할 수 있다.

레시피는 1개만 있고 레시피를 통해 만들어진 음식도 1개라고 할 수 있을까?
: 맞거나 아니다. 레시피는 응용할 수 있다.
* 잘 만든 레시피는 여러개의 음식을 만들 수 있다.
레시피 1개로 딱 1개의 음식만 만들었을 경우
레시피 1개로 5개의 음식을 만들었을 경우

레시피가 있다면 음식도 만들어진 것 일까?
: 음식을 만든 사람이 정의한 것이나 실제 만들어진 음식은 아니다.

서로 다른 쭈꾸미 레시피로 각각 요리를 했다면 음식은 쭈꾸미라는 성격을 갖는다.
이 음식은 서로 같은 음식이라고 할 수 있을까?
: 레시피가 같으면  레시피가 다르면 다른 음식이라고 할 수 있다.
  만들어진 음식은 독립적이다.  

레시피는 여러 사람과 공유할 수 있다. 이때 레시피는 하나이고, 레시피를 참조하는 사람도 1명일까?
: 잘 만들어진 레시피 1개를 여러명이 참조할 것 같다. 레시피는 public한 성격을 가지고 있다. 

*레시피를 만든 객체는 독립적인 존재이고 그 레시피는 여러명이 사용할 수 있다.

*공유의 장점: 자원 낭비 감소 (메모리와 CPU의 사용량을 적게 만들 수 있다. = 성능과 용량의 효율)
*공유의 단점: private한 영역은 위험하다. 

여러 사람이 하나의 레시피를 참조할때 어떤 사람이 레시피를 수정한다면 다른 사람은 수정된 레시피를 볼까?
아니 수정 되지 않은 상태의 레시피를 볼까?
: 공유한다면 다른 사람이 변경할 수 있고 다른 사람도 변경된 내용을 보게 된다.

< 결론 >
레시피와 음식이 있다.
 - Class가 있어야 객체를 만들 수 있다.
 - 레시피는 class이고 음식은 객체라고 볼 수 있다. 

레시피로 사람이 만들어야 음식이 된다.
 - 클래스는 new 연산자로 객체를 만든다. (참조변수) 

<저장하는 공간>
변수: 메모리 (Ram)
소스: 하드디스크
int= 4byte
char= 2byte
String= 바이트 수가 없다.

소문자로 시작: 원시변수
대문자로 시작: 참조변수 (코드에서 . (점) 찍으면 참조하라는 뜻)

ex) 현금은 원시변수(실제값), 카드는 참조변수 (카드는 내 계좌와 연결되어 있는 주소로 볼 수 있음)

< Stack 영역 >
- 실제값이 저장되는 공간 
* 컴퓨터의 메모리와 같은 공간 

< heap 영역 >
- 객체의 주소가 저장되는 공간, 객체를 참조하기 위한 주소
- 객체를 아무도 참조하지 않는다면 가비지 컬렉터(GC)가 그 객체를 삭제한다. (공간을 알아서 비워준다./ 용량 정리)
- Java는 공간에 저장하고 비우는 기능이 자동적으로 되지만 C는 직접 찾아서 삭제해야한다..

하나의 class는 하나의 기능만 주겠다.
