9/20

< 해석 >
Cat_obj[] clist = new Cat_obj[5]; : 선언문 - 변수를 만든다.
: Cat_obj라는 배열 자료형인 clist를 새로운 Cat_obj라는 5개의 배열을 가진 연산자로 만든다.

< 띄어서 해석하기 >

- 자료형: 저장할 값의 타입을 지정. 이 타입은 원시타입과 참조타입이 있다.
원시타입은 실제 값을 저장하고 참조타입은 객체의 주소를 저장한다.
Cat_obj[] : Cat_obj라는 객체의 주소 (실제 값이 없으니 참조변수, 객체의 주소를 저장하겠다)

- 변수: 값을 저장하는 기억 공간
clist

- 대입 연산자
= 

- new 연산자
new : new는 heap 영역에 객체를 만들고 객체의 주소를 가져온다. 

- 객체
Cat_obj[5]; : 라는 객체를 만들겠다

* () : 생성자

< 클래스와 객체 >
클래스는 객체를 정의한 정의서, 객체는 클래스로 만든 실제 사용하려는 대상
객체는 메모리의 힙 영역에 생성된다.
선언문에서 타입으로 원시 변수와 참조 변수를 구분하고, 참조변수는 객체의 주소값, 변수에 저장된 주소로 객체를 참조한다.
참조 연산자는 점(.)이다. 이때는 GC가 객체를 소멸시킨다.

< 클래스는 > 
멤버변수와 메서드로 정의한다. 메서드 중에는 생성자라는 메서드가 있다. 생성자는 객체가 생성될 때 호출되는 메서드이다.
new 생성자 () * 생성자의 이름은 클래스 이름과 동일하다.
멤버변수는 클래스 내부에 선언하는 변수이며 사용범위는 클래스 영역 전체이다.
지역변수는 블록 내에서 선언하는 변수이며 scope는 블록 영역이다.

** 코딩 tip **
- 참조 연산을 최소화 시킨다. 
- 변수는 메모리를 할당하므로 필요할때만 할당하고 사용하지 않는다면 회수하는 것이 좋다.

< Stack 영역 >
* 컴퓨터의 메모리와 같은 공간 (종료하면 실행이 끝나는 휘발성)
- 메소드로 호출할때마다 쌓임 + 블록이 다 닫히면 공간이 비워지게 됨
- 지역 변수 저장 공간 ( 휘발성 ) / 멤버 변수는 다른 공간에 저장됨

< heap 영역 >
- 객체의 주소가 저장되는 공간, 객체를 참조하기 위한 주소
- new 연산자가 객체를 생성해준다.
- 객체를 아무도 참조하지 않는다면 가비지 컬렉터(GC)가 그 객체를 삭제한다. (공간을 알아서 비워준다./ 용량 정리)
- Java는 공간에 저장하고 비우는 기능이 자동적으로 되지만 C는 직접 찾아서 삭제해야한다..