2024.9.30

<지난시간 되돌아보기> 
Class: 개발자가 표현하고자 하는 대상 - 표현방법 (멤버변수 + 메소드)
Method: 어떤 클래스를 정의, 클래스에 의존

<접근제어자>
Shop(프로젝트명)
bin: 확장자가 class, 자바 파일을 기계언어로 저장하고 있는 공간
src: 확장자가 java, 자바 파일을 저장하고 있는 공간

ex)
src (src에 패키지를 생성)
- package {a- (M.java), (K.java)}
		  {b - (P.java)}
(패키지 안에는 a, b라는 클래스가 있다.)

M.java
K k = new K();
K.name
: name이라는 멤버변수는 패키지 내에서 접근할 수 있는 접근제어자이다.
: 같은 패키지에 접근 가능하기 때문에 가능하다.

K.java
String name = null; 
: name이라는 멤버변수는 default라는 접근제어자가 생략되어있다.
: 패키지 내에서는 name이라는 멤버변수에 접근할 수 있다.
: name은 K.java라는 클래스에 소속되어 있는 멤버변수이다. 

public void setName(String n){
: 메소드

name = n;
: 멤버변수 name의 값을 n에 저장한다.
}
-------------------------------------------------- 
		  
<접근자의 종류>
: 접근자는 보통 은닉하기 위해 사용한다. 
- default: 패키지 내에서 접근 가능
- public: 전체 접근 가능
- private: 클래스 내에서 접근 가능
- protected

* 멤버변수는 보통 은닉화 한다.
* 멤버변수를 공개하는 것은 주민등록번호를 공개하는 것과 같음
* 다른 변수로 값을 저장해서 값을 불러오거나 출력하도록 한다.(멤버변수는 접근하지 못하게끔)

<객체 지향 언어를 만드는 순서>
1. 클래스 정의 
2. 멤버변수와 메소드를 정의 
3. 멤버변수와 메소드의 접근권한 부여

<접근자 사용의 장점>
- 똑같은 기능의 통일성 유지
- 메모리 용량과 성능 관리
- 객체의 재사용성

