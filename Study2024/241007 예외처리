2024.10.7

Java 예외처리
오라클 연동(DAO, DFO)

예외처리
	에러(error) vs 예외(exception)를 구분
	* 자바는 컴파일 언어이며 객체 지향 언어이다.
	에러 = 컴파일이 안된다 = 실행이 안된다.
	예외는 실행중에 예기치못한 이슈가 발생하는 것 = 오작동이 일어날 수 있음 *사전에 방지해야함.
	Java에서 예외를 처리해주는 객체 = exception이라는 class에서 정의
	ex) Null Pointer~, IndexOutOf~
	
	ex) M [] a = new M[6];
		sysout(a[2].id);
		에러가 발생할까? 예외가 발생할까?
		= 예외가 발생한다.
		sysout(a[6].id);
		= indexOutOf~ 예외가 먼저 발생한다. 인덱스에 접근을 할 수 없기 때문.
		
		자바는 예외처리를 필수적으로 해야하는게 있고 아닌게 있다.
		
		<면접>
		객체를 배우면서 예외가 많이 나서 JVM을 공부했다.
		그리고 (IO package 참조)를 써보면서 예외처리를 필수적으로 해야하는 객체가 있다는 것을 안다.
		
예외 처리 방법 2가지
(1) 직접 처리 
	= try/catch
(2) 떠넘기기 (누구에게 call한 위치로) 
	= 메서드명() throws exception
	: 메서드에서 exception이 발생하면 나를 call한 메서드가 처리
	
RAM (램 안에 있는 독립적인 프로그램 영역)
[JVM]: java binary machine = 자바는 JVM이 있어야만 실행된다.
		p s id;
		p s name;
		p i age;
		회원가입 insert
[Oracle]: 데이터를 저장하기 위한 테이블 생성
		  위의 데이터를 오라클의 테이블에 insert하면 지워지지 않는 데이터가 됨.
		  하나의 튜플이라는 데이터를 java에서는 하나의 객체로 만든다.
		  라이브러리 배포 소스파일 묶음
		  * 배포형식: jar
		  
DTO : 자바에 있는 객체와 오라클에 있는 튜플이라는 데이터로 옮기거나
	  오라클에 있는 튜플이라는 데이터를 자바에 객체로 저장할때 쓰이는 객체
	  = 서로 다른 프로그램을 사용하기 때문에
	  
	  insert, delete, select, update

<실습>	  
오라클에서 배포한 라이브러리 ojdbc6.jar를 아무대나 막 저장할 수 없으니,
적당한 위치라고 생각되는 워크스페이스에 저장하겠다.
라이브러리 준비됨(ojdbc6.jar)
1. 프로젝트에 라이브러리 빌드...(빌드는 생성하여 준비하다)
>> 이클립스 기준으로 프로젝트 우클릭 후 build Path

2. 라이브러리로부터 필요한 드라이버를 로드한다.
>> 클래스 구조를 좀 변경하고 가겠습니다. 이유는 현실적으로 디자인하기위해


	