< Git >
Git의 사용목적: 협업
Commit: 올린 횟수
Readme. : 어려웠던 이슈 적기 (피드백)
Github: 원격 (remote)
Branch: 작업 영역
Github에는 Branch가 있다: 실행중일때 기존 브랜치가 정지되지 않도록 브랜치를 여러개 만들어놔야함.
Fork: 좋아요 느낌 (이 프로젝트를 좋아하는 사람이나 같이 작업하는 사람)
UTF-8: 저장 방식 (영문버전에서도 한글을 읽어낼 수 있는 방식: 번역)
인코딩, 엔코딩: 작성한 문자를 어떠한 방식으로 이진수로 바꿀 것인가 (*프로그램 기본 역량)
Workspace: 내가 개발할 소스를 모아놓을 공간 폴더
insert: delete 변환
pwd: 현재 위치
cd: 위치 변경 명령어
/: 루트
git init: 깃으로 관리하겠다 (local)
-f(force): 강제로 올리는 것, 최신파일 강제적으로 바꾸기 (현업에서는 쓰면 안됨)
git fetch: 업데이트 된게 있는지 확인
git pull - git push
pull로 readme 저장하기
----------------------------------------------------------------------------------------
Java
변수는 값을 저장하는 공간이다.
Type/ 어떤 값으로 저장할 것인가?: int(정수), double(실수), String(문자열) 등
각각의 종류에 따라 바이트 수가 다르다.
byte: 낮을수록 처리하기 좋음 (공간 차지) 프로그램이 무겁다-가볍다의 차이 (*자료형의 중요성)
보조기억장치: 내가 삭제하지 않는 한 지워지지 않는 저장 (내가 지우지 않는 이상 영구적)(usb, hdd, sd)
CPU: 처리장치
메모리: 주기억장치 (임시적 기억장치: 컴퓨터가 전원이 켜졌을때만 기억함)
ex) 보조기억장치에서 주기억장치로 데이터를 보내게 될때에는 어떤 경우? : 내가 저장한 파일을 실행할때
----------------------------------------------------------------------------------------
연산자: a++;/a=a+1; = 단항/이항 (단항 연산자가 빠르다)
단항 연산자: ++, --
이항 연산자: #산술연산자: +, -, *, /, % 등 #비교연산자: ==,!=,>= 등 #대입연산자: -=, *=, /= 등
연산 우선순위: 대입 < 비교 < 산술 (수학 개념이랑 똑같음) 
ex) (-a)/3+2 라면 = 괄호 안의 -a, 나누기 3, 더하기 2 순으로 계산
-----------------------------------------------------------------------------------------
배열
int[]a = new int[];
index= 0 1 2 3 4 ... (6-1) value= 20 30 13 25 32 ... (20은 index를 이용해 0으로 저장할 수 있다)
value 값을 일일이 기억하기 불편하기때문에 index 순서로 값을 정할 수 있다.
장점: 변수를 하나로 사용해서 여러개의 값을 저장
특징: 고정길이
위의 코드에서는 인트값만 넣을 수 있다. (단일변수) / 다르게 응용할 수 있기 때문에 위의 코드에서만 적용되는 답이다.